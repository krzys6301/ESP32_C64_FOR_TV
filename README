**THERE IS ABSOLUTELY NO WARRANTY FOR THIS SOFTWARE, I'M NOT RESPONSIBLE FOR ANY DAMAGE IT CAN CAUSE EITHER BY PROPER USE OR IMPROPER USE, YOU USE IT AT YOUR OWN RISK AND RESPONSIBILITY, have fun :)**

![Alt text](/PHOTO/IMG_20220617_014104.jpg?raw=true "work in progress")

This is an C64 simulator that runs on single esp32 board,
It can be directly connected to the composite input of the TV - pin 25 is NTSC composite output and pin 18 is audio.
There is an async http server accessible at port 80, which allows to upload a *.PRG file, and execute some commands on the C64 "console" screen, eg. issue RUN or LIST command.
There is WiFi manager installed, so after first boot you need to connect to wifi network "EPS_32" and setup the WiFi pass and ssid for your WIFi connection, if the esp remembers a wifi network from your previous project then it will most likely connect autmatically.
There is also OTA for over-the-air updates - handy for quick testing.

Joystick is working (Peeking the c64 address 56320 & 56321 "PEEK(56320):PEEK(56321)" is showing that the movements are detected), the pins used are described in iopins.h and emuapi.cpp)
jostick pins:
#define JOY_1_up      12
#define JOY_1_down    14
#define JOY_1_left    5
#define JOY_1_right   4
#define JOY_1_fire    17

PIN 23 - port select joy1 or joy2
Although there is only one joystick joy1 defined, one can switch the port "at runtime" by grounding pin 23 to use port joy1 or joy2 with the pins above;

I compiled it with arduino 1.8.19 and esp32 board installed from https://dl.espressif.com/dl/package_esp32_index.json

There are definitively some bugs there, the speed is probably somwhere at 80% of the orginall C64, the vic.cpp is probably the slowest part depending on the screen mode, maybe there are some techniques which I'm not aware of to improve the speed of emulation.
Everyone is welcomed to do some improvements, that's the reason I push this software to git.
This project uses brilliant solutions from several other projects: 
reSID (https://github.com/simonowen/resid)
espMCUME (https://github.com/Jean-MarcHarvengt/espMCUME)
AsyncHttpServer for ESP32 (https://github.com/me-no-dev/ESPAsyncWebServer)
esp_8_bit (https://github.com/rossumur/esp_8_bit)
bitluni esp32 composite out (https://github.com/bitluni/ESP32CompositeVideo)

without the above projects this one wouldn't probably exist, if you see your open source work in this project and you're not enlisted please let me know, so I can add you here for the fame, thanks and record :)

TODO:
-- add maybe other formats than *.PRG
-- make the emulation faster
-- improve the web console as it sometimes leads the restart of ESP32
-- debug if joystick works with game "Boulder Dash (J1).prg", with others it works
-- any other idea is welcomed, you can reach me at e-mail krzys6301@gmail.com for this matter.

I've tested it with an excellent set of C64 games, that I've downloaded form https://www.lemon64.com/forum/viewtopic.php?t=76305
The path for the *.PRG that works with this simulator is: OneLoad64-Games-Collection-v3\PRGs\Crunched\*.PRG

There is BoulderDash, Paradroid, Frogger, Acid Runner etc in this collection, and all of them seem to work, and these games seems to be playable at current emulation speed.
Some games are much slower, some are quite fast, depends on the way the use the vic chip, the code in vic.cpp can probably be improved.

To add features like WebServer and sound it was neccessary to squezze some RAM out of the emulator.
What canusmes the most? FrameBuffer, and C64 for uses only 16 colors, so instead of using a byte per pixel, I squezzed it to be 4 bits per pixel, as that's perfect for storing the color information.
After each line the vic is drawing it is transformed into more concise format 4bit/pixel, which allows to store information about pixel collor of 16 possible colors in the c64,
the conversion is done by the display.eol() function. Rewriting the vic.cpp to natively write in this format would probably improve performance, but that is much work.
This solution saved quite a lot of ram memory on the frame buffer (half), and thanks to this there can be more fetures like sound, webserver and OTA.

When this board starts is prints the IP address to the Serial console, the default serial speed is 115200.




